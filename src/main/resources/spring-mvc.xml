<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
     
    <!-- 扫描controller（controller层注入） -->
   <context:component-scan base-package="com.dyjs.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
   
     <mvc:annotation-driven />
     

      <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>

        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
	    <property name="messageConverters">  
	        <list>  
	            <ref bean="jsonHttpMessageConverter" />  
	        </list>  
	    </property>  
	</bean>  
	  
	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	    <property name="supportedMediaTypes">  
	        <list>  
	            <value>application/json;charset=UTF-8</value>  
	        </list>  
	    </property>  
	</bean>  

    <!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler />  
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>
      <!-- 静态资源文件，不会被Spring MVC拦截 -->  
	<mvc:resources mapping="/swagger/**" location="/WEB-INF/swagger/" />  

   <!-- 对模型视图添加前后缀 -->
     <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
      p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>
      
      
   <!-- 将 springSwaggerConfig加载到spring容器 -->  
	<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />
	<!-- 将自定义的swagger配置类加载到spring容器 -->  
	<bean class="com.dyjs.swagger.SwaggerConfig" /> 
	
	<bean id ="logOperate" class="com.dyjs.tools.log.LogOperate" />
	
	<aop:config proxy-target-class="true" />    
	<aop:config>  
	<!--定义切面-->  
	    <aop:aspect id="logAspect" ref="logOperate">  
	    <!-- 定义切入点 (配置在com.dyjs.controller下所有的类在调用之前都会被拦截)-->  
	    <aop:pointcut expression="execution(* com.dyjs.controller.*.*(..))  "  id="logPointCut"/>  
	    <!--方法执行之前被调用执行的-->  
	    <aop:before method="before" pointcut-ref="logPointCut"/><!--一个切入点的引用-->  
	    <aop:after method="after" pointcut-ref="logPointCut"/><!--一个切入点的引用-->  
	    </aop:aspect>  
	</aop:config>   
</beans>